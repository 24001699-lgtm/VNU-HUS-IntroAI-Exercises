import heapq
import time


GOAL = "123456780"  # 0 l√† √¥ tr·ªëng
MOVE = [(-1, 0), (1, 0), (0, -1), (0, 1)] 

# H√†m l·∫•y c√°c tr·∫°ng th√°i k·ªÅ
def get_neighbors(state):
    neighbors = []
    idx = state.index('0')
    x, y = divmod(idx, 3)
    for dx, dy in MOVE:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            nidx = nx * 3 + ny
            new_state = list(state)
            new_state[idx], new_state[nidx] = new_state[nidx], new_state[idx]
            neighbors.append(''.join(new_state))
    return neighbors


# Heuristic h1: 
def h1(state):
    return sum(1 for i, v in enumerate(state) if v != '0' and v != GOAL[i])


# Heuristic h2:
def h2(state):
    distance = 0
    for i, v in enumerate(state):
        if v != '0':
            goal_index = GOAL.index(v)
            x1, y1 = divmod(i, 3)
            x2, y2 = divmod(goal_index, 3)
            distance += abs(x1 - x2) + abs(y1 - y2)
    return distance



# Thu·∫≠t to√°n A*

def a_star(start, heuristic):
    frontier = []
    heapq.heappush(frontier, (heuristic(start), 0, start, [start]))
    explored = set()
    expanded_nodes = 0

    while frontier:
        f, g, state, path = heapq.heappop(frontier)

        if state == GOAL:
            return path, expanded_nodes

        explored.add(state)
        expanded_nodes += 1

        for neighbor in get_neighbors(state):
            if neighbor not in explored:
                new_g = g + 1
                new_f = new_g + heuristic(neighbor)
                heapq.heappush(frontier, (new_f, new_g, neighbor, path + [neighbor]))

    return None, expanded_nodes



# H√†m in tr·∫°ng th√°i d·∫°ng b·∫£ng

def print_state(state):
    for i in range(0, 9, 3):
        print(state[i:i+3].replace('0', ' '))
    print()



# Ch·∫°y th·ª≠

if __name__ == "__main__":
    # V√≠ d·ª• tr·∫°ng th√°i ban ƒë·∫ßu
    start_state = "283164705"   # b·∫°n c√≥ th·ªÉ ƒë·ªïi tr·∫°ng th√°i n√†y ƒë·ªÉ test

    print("=== B·∫Øt ƒë·∫ßu t·ª´ tr·∫°ng th√°i ===")
    print_state(start_state)

    # ---- A* v·ªõi h1 ----
    print("üî∏ A* v·ªõi h1 (Misplaced Tiles)")
    start_time = time.time()
    path_h1, expanded_h1 = a_star(start_state, h1)
    end_time = time.time()

    if path_h1:
        print(f"S·ªë b∆∞·ªõc: {len(path_h1) - 1}")
        print(f"S·ªë n√∫t m·ªü r·ªông: {expanded_h1}")
        print(f"Th·ªùi gian: {end_time - start_time:.4f} gi√¢y")
    else:
        print("Kh√¥ng t√¨m th·∫•y l·ªùi gi·∫£i")

    print("\nL·ªô tr√¨nh (h1):")
    for p in path_h1:
        print_state(p)

    # ---- A* v·ªõi h2 ----
    print("üî∏ A* v·ªõi h2 (Manhattan Distance)")
    start_time = time.time()
    path_h2, expanded_h2 = a_star(start_state, h2)
    end_time = time.time()

    if path_h2:
        print(f"S·ªë b∆∞·ªõc: {len(path_h2) - 1}")
        print(f"S·ªë n√∫t m·ªü r·ªông: {expanded_h2}")
        print(f"Th·ªùi gian: {end_time - start_time:.4f} gi√¢y")
    else:
        print("Kh√¥ng t√¨m th·∫•y l·ªùi gi·∫£i")

    print("\nL·ªô tr√¨nh (h2):")
    for p in path_h2:
        print_state(p)

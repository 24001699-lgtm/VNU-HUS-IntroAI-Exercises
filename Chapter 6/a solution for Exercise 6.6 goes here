from collections import deque

# (dx, dy)
MOVE = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
GOAL = "123456780"

def get_neighbors(state):
    neighbors = []
    idx = state.index("0")
    x, y = divmod(idx, 3)
    for dx, dy in MOVE:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            nidx = nx * 3 + ny
            new_state = list(state)
            new_state[idx], new_state[nidx] = new_state[nidx], new_state[idx]
            neighbors.append("".join(new_state))
    return neighbors

# Breadth-First Search
def bfs(start):
    queue = deque([(start, [start])])
    visited = set([start])
    while queue:
        state, path = queue.popleft()
        if state == GOAL:
            return path
        for neighbor in get_neighbors(state):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    return None

# Depth-First Search
def dfs(start, limit=50):
    stack = [(start, [start])]
    visited = set([start])
    while stack:
        state, path = stack.pop()
        if state == GOAL:
            return path
        if len(path) < limit:
            for neighbor in get_neighbors(state):
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append((neighbor, path + [neighbor]))
    return None

# Iterative Deepening Search
def dls(state, path, depth, visited):
    if state == GOAL:
        return path
    if depth == 0:
        return None
    for neighbor in get_neighbors(state):
        if neighbor not in visited:
            visited.add(neighbor)
            result = dls(neighbor, path + [neighbor], depth - 1, visited)
            if result:
                return result
    return None

def ids(start, max_depth=50):
    for depth in range(max_depth):
        visited = set([start])
        result = dls(start, [start], depth, visited)
        if result:
            return result
    return None

# --- Test ---
if __name__ == "__main__":
    start = "123460758"
    print("BFS tìm thấy đường đi:", bfs(start))
    print("DFS tìm thấy đường đi:", dfs(start))
    print("IDS tìm thấy đường đi:", ids(start))
